name: Generate Code Coverage Report

on:
  push:
    branches:
      - master
      - develop
      - test-csharp-codecov
  pull_request:
    branches:
      - master
      - develop

env:
  BUILD_TYPE: Debug

jobs:
  codecov:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
        cache: 'pipenv'

    - name: Setup .NET 8
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: './Ribosoft/package-lock.json'

    - name: Setup CMake
      uses: jwlawson/actions-setup-cmake@v2
      with:
        cmake-version: '3.20'

    - name: Install OpenCppCoverage
      run: choco install opencppcoverage

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pipenv
        pipenv install --dev

    - name: Generate Python coverage report
      run: pipenv run pytest --cov-report=xml:coverage-python.xml --cov=. --cov-config=.coveragerc

    - name: Get library dependencies
      run: pipenv run python ribosoft.py deps install --yes

    - name: Create Build Environment
      run: cmake -E make_directory ${{github.workspace}}/RibosoftAlgo/build

    - name: Configure CMake
      shell: bash
      working-directory: ${{github.workspace}}/RibosoftAlgo/build
      run: cmake .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE

    - name: Build RibosoftAlgo
      shell: bash
      working-directory: ${{github.workspace}}/RibosoftAlgo/build
      run: cmake --build . --config $BUILD_TYPE --parallel

    - name: Install and build frontend assets
      shell: bash
      working-directory: ${{github.workspace}}/Ribosoft
      run: |
        npm ci
        npm run build:vendor:dev
        npm run build:dev

    - name: Build Ribosoft
      run: dotnet build Ribosoft.sln --configuration Debug --no-restore

    - name: Generate C++ coverage report
      shell: cmd
      working-directory: ${{github.workspace}}/RibosoftAlgo
      run: |
        "C:\Program Files\OpenCppCoverage\OpenCppCoverage.exe" ^
          --export_type cobertura:coverage-cpp.xml ^
          --sources=${{github.workspace}}\RibosoftAlgo\src ^
          --modules=${{github.workspace}}\RibosoftAlgo\build\*.dll ^
          -- build\bin\Debug\tests.exe

    - name: Generate C# coverage report
      run: |
        dotnet test Ribosoft.sln ^
          --configuration Debug ^
          --no-build ^
          --collect:"XPlat Code Coverage" ^
          --results-directory:${{github.workspace}} ^
          --settings:coverlet.runsettings

    - name: Move coverage files
      shell: powershell
      run: |
        Get-ChildItem -Path . -Recurse -Filter "*.cobertura.xml" | Move-Item -Destination .

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./RibosoftAlgo/coverage-cpp.xml,./coverage.cobertura.xml,./coverage-python.xml
        fail_ci_if_error: false
        verbose: true
