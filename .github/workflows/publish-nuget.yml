name: Publish RibosoftAlgo NuGet Package

on:
  push:
    branches: [ master ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      version_override:
        description: 'Override version (e.g., 2.3.0-beta.1)'
        required: false
        type: string

env:
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  publish:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for GitVersion
    
    - name: Setup .NET 8
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        
    - name: Setup Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
        cache: 'pipenv'
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y g++-13 libomp-dev curl
        
    - name: Verify build tools
      run: |
        echo "Build environment verification:"
        dotnet --version
        g++-13 --version
        python3 --version
        echo "✅ All build tools verified"
        
    - name: Install Python dependencies
      run: |
        pip install pipenv
        pipenv install
        
    - name: Install C++ dependencies (required for native library build)
      run: |
        pipenv run python ribosoft.py deps install --yes
        
    - name: Determine package version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ github.event.inputs.version_override }}" ]]; then
          VERSION="${{ github.event.inputs.version_override }}"
          echo "Using manual override version: $VERSION"
        elif [[ "${{ github.ref }}" == refs/tags/v* ]]; then
          VERSION="${{ github.ref_name }}"
          VERSION="${VERSION#v}"  # Remove 'v' prefix
          echo "Using tag version: $VERSION"
        elif [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
          # Get current version from csproj and increment patch
          CURRENT_VERSION=$(grep -oP '<PackageVersion>\K[^<]+' RibosoftAlgo/RibosoftAlgo.csproj)
          MAJOR=$(echo $CURRENT_VERSION | cut -d. -f1)
          MINOR=$(echo $CURRENT_VERSION | cut -d. -f2)
          PATCH=$(echo $CURRENT_VERSION | cut -d. -f3)
          NEW_PATCH=$((PATCH + 1))
          VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          echo "Auto-incremented version: $VERSION"
        else
          # Development build
          CURRENT_VERSION=$(grep -oP '<PackageVersion>\K[^<]+' RibosoftAlgo/RibosoftAlgo.csproj)
          COMMIT_SHA=$(git rev-parse --short HEAD)
          VERSION="$CURRENT_VERSION-dev.$COMMIT_SHA"
          echo "Development version: $VERSION"
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "📦 Package version determined: $VERSION"
        
    - name: Update project version
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        echo "Updating RibosoftAlgo.csproj with version: $VERSION"
        
        # Update PackageVersion in csproj
        sed -i "s|<PackageVersion>.*</PackageVersion>|<PackageVersion>$VERSION</PackageVersion>|" RibosoftAlgo/RibosoftAlgo.csproj
        
        # Verify the update
        grep -n "PackageVersion" RibosoftAlgo/RibosoftAlgo.csproj
        
    - name: Build RibosoftAlgo with modern MSBuild integration
      run: |
        cd RibosoftAlgo
        echo "🔨 Building RibosoftAlgo with native library integration..."
        
        # Build with Release configuration and enhanced logging
        dotnet build RibosoftAlgo.csproj \
          --configuration Release \
          --verbosity normal \
          --nologo \
          -p:TreatWarningsAsErrors=false \
          -p:WarningLevel=1
          
        echo "✅ Build completed successfully"
        
    - name: Build and run modernized C++ tests
      run: |
        echo "🧪 Building and running modernized C++ tests..."
        
        # Build the test project (this will trigger C++ test building via MSBuild targets)
        dotnet build RibosoftAlgo.Tests/RibosoftAlgo.Tests.csproj \
          --configuration Release \
          --verbosity normal
        
        # Run the .NET test wrapper which executes the C++ tests
        dotnet test RibosoftAlgo.Tests/RibosoftAlgo.Tests.csproj \
          --configuration Release \
          --no-build \
          --verbosity normal \
          --logger "console;verbosity=normal"
        
        echo "✅ All tests completed"
        
    - name: Create NuGet package
      run: |
        cd RibosoftAlgo
        echo "📦 Creating NuGet package..."
        
        # Create package with enhanced metadata
        dotnet pack RibosoftAlgo.csproj \
          --configuration Release \
          --no-build \
          --output ./nupkg \
          --verbosity normal \
          -p:IncludeSymbols=true \
          -p:SymbolPackageFormat=snupkg \
          -p:PackageReleaseNotes="Automated build from commit ${{ github.sha }}"
          
        # List created packages
        echo "📋 Created packages:"
        ls -la ./nupkg/
        
    - name: Validate NuGet package
      run: |
        cd RibosoftAlgo/nupkg
        echo "🔍 Validating NuGet package contents..."
        
        # Extract and examine package contents
        for pkg in *.nupkg; do
          echo "Examining package: $pkg"
          unzip -l "$pkg" | head -20
          echo "---"
        done
        
    - name: Publish to NuGet.org
      run: |
        cd RibosoftAlgo
        echo "🚀 Publishing to NuGet.org..."
        
        # Publish main package
        dotnet nuget push ./nupkg/*.nupkg \
          --api-key ${{ secrets.NUGET_API_KEY }} \
          --source https://api.nuget.org/v3/index.json \
          --skip-duplicate \
          --no-symbols
          
        # Publish symbols package if it exists
        if ls ./nupkg/*.snupkg 1> /dev/null 2>&1; then
          echo "📊 Publishing symbols package..."
          dotnet nuget push ./nupkg/*.snupkg \
            --api-key ${{ secrets.NUGET_API_KEY }} \
            --source https://api.nuget.org/v3/index.json \
            --skip-duplicate
        fi
        
        echo "✅ Package published successfully"
        
    - name: Create GitHub release (for tags)
      if: startsWith(github.ref, 'refs/tags/v')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: RibosoftAlgo ${{ steps.version.outputs.version }}
        body: |
          ## RibosoftAlgo ${{ steps.version.outputs.version }}
          
          ### Changes
          - Automated release from tag ${{ github.ref_name }}
          - Built with .NET 8 and C++23 modernization
          - Includes native libraries for Linux x64
          - Comprehensive C++ test suite with Catch2 framework
          
          ### NuGet Package
          ```
          dotnet add package RibosoftAlgo --version ${{ steps.version.outputs.version }}
          ```
          
          ### Build Information
          - Commit: ${{ github.sha }}
          - Build Date: ${{ github.run_id }}
          - Workflow: ${{ github.workflow }}
          - C++ Standard: C++23
          - Test Framework: Catch2 + xUnit wrapper
        draft: false
        prerelease: ${{ contains(steps.version.outputs.version, '-') }}
        
    - name: Upload package artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nuget-packages-${{ steps.version.outputs.version }}
        path: RibosoftAlgo/nupkg/
        retention-days: 90
