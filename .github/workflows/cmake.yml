name: RibosoftAlgo CMake Builds

on: [push, workflow_dispatch]

env:
  BUILD_TYPE: Release

jobs:
  build:
    strategy:
      matrix:
        # Focus on Ubuntu/Linux builds for modernization and C++23 development
        # macOS disabled: Should build for Apple Silicon (arm64) natively, not x86_64 workarounds
        # Windows disabled: ViennaRNA library compiler version compatibility issues
        os: [ubuntu-latest]
        include:
          - os: ubuntu-latest
            cc: gcc-13
            cxx: g++-13
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
        cache: 'pipenv'

    - name: Setup CMake
      uses: jwlawson/actions-setup-cmake@v2
      with:
        cmake-version: '3.28'

    - name: Setup .NET 8
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-13 g++-13 libomp-dev

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        # Install both arm64 and x86_64 versions of libomp
        brew install libomp
        # Install x86_64 version using Rosetta for x86_64 builds
        arch -x86_64 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)" || true
        arch -x86_64 /usr/local/bin/brew install libomp || true
        
        # Set up environment for x86_64 OpenMP
        echo "OpenMP_ROOT=/usr/local/opt/libomp" >> $GITHUB_ENV
        echo "LDFLAGS=-L/usr/local/opt/libomp/lib -lomp" >> $GITHUB_ENV
        echo "CPPFLAGS=-I/usr/local/opt/libomp/include" >> $GITHUB_ENV

    - name: Setup MSVC (Windows)
      if: matrix.os == 'windows-latest'
      uses: ilammy/msvc-dev-cmd@v1

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pipenv
        pipenv install --dev

    - name: Get library dependencies
      run: pipenv run python ribosoft.py deps install --yes

    - name: Create Build Environment
      run: cmake -E make_directory ${{github.workspace}}/RibosoftAlgo/build

    - name: Configure CMake (Unix)
      if: matrix.os != 'windows-latest'
      shell: bash
      working-directory: ${{github.workspace}}/RibosoftAlgo/build
      run: |
        if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
          # Force x86_64 architecture on macOS to match pre-built dependencies
          CC=${{ matrix.cc }} CXX=${{ matrix.cxx }} cmake .. \
            -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
            -DCMAKE_OSX_ARCHITECTURES=x86_64 \
            -DCMAKE_EXE_LINKER_FLAGS="-L/usr/local/opt/libomp/lib -lomp" \
            -DCMAKE_SHARED_LINKER_FLAGS="-L/usr/local/opt/libomp/lib -lomp"
        else
          CC=${{ matrix.cc }} CXX=${{ matrix.cxx }} cmake .. \
            -DCMAKE_BUILD_TYPE=$BUILD_TYPE
        fi

    - name: Configure CMake (Windows)
      if: matrix.os == 'windows-latest'
      shell: bash
      working-directory: ${{github.workspace}}/RibosoftAlgo/build
      run: |
        # Try different MSVC toolsets to find one compatible with pre-built ViennaRNA
        echo "Trying MSVC v142 toolset..."
        cmake .. -G "Visual Studio 17 2022" -A x64 \
          -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
          -T v142 || \
        (echo "v142 failed, trying v143..." && \
         cmake .. -G "Visual Studio 17 2022" -A x64 \
           -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
           -T v143) || \
        (echo "v143 failed, trying default..." && \
         cmake .. -G "Visual Studio 17 2022" -A x64 \
           -DCMAKE_BUILD_TYPE=$BUILD_TYPE)

    - name: Build
      shell: bash
      working-directory: ${{github.workspace}}/RibosoftAlgo/build
      run: cmake --build . --config $BUILD_TYPE --parallel

    - name: Test
      shell: bash
      working-directory: ${{github.workspace}}/RibosoftAlgo/build
      run: ctest -C $BUILD_TYPE --output-on-failure --parallel

    - name: Upload test results
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.os }}
        path: ${{github.workspace}}/RibosoftAlgo/build/Testing/
