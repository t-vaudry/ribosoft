<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <IncludeBuildOutput>false</IncludeBuildOutput>
    <SuppressDependenciesWhenPacking>true</SuppressDependenciesWhenPacking>
    
    <!-- Package Information -->
    <PackageId>RibosoftAlgo</PackageId>
    <PackageVersion>2.2.0</PackageVersion>
    <Authors>t-vaudry</Authors>
    <Company>Ribosoft</Company>
    <Product>RibosoftAlgo</Product>
    <Description>Modern Ribosoft algorithm support library for ribozyme design and bioinformatics calculations. Built with C++23, includes ViennaRNA and Melting temperature algorithms. Optimized for .NET 8+ with native AOT support.</Description>
    <PackageProjectUrl>https://github.com/t-vaudry/ribosoft</PackageProjectUrl>
    <PackageLicenseExpression>GPL-3.0-or-later</PackageLicenseExpression>
    <RepositoryUrl>https://github.com/t-vaudry/ribosoft</RepositoryUrl>
    <RepositoryType>git</RepositoryType>
    <PackageTags>bioinformatics;ribozyme;rna-folding;melting-temperature;viennarna;cpp23;dotnet8;native-aot;high-performance</PackageTags>
    <PackageReleaseNotes>Version 2.2.0 release: Enhanced stability, improved PostgreSQL Hangfire integration, resolved deprecation warnings, and comprehensive nullable reference type support for better code quality and maintainability.</PackageReleaseNotes>
    <Copyright>Copyright Â© 2025</Copyright>
    
    <!-- Build Configuration -->
    <EnableDefaultItems>false</EnableDefaultItems>
    <GenerateAssemblyInfo>false</GenerateAssemblyInfo>
    <GenerateTargetFrameworkAttribute>false</GenerateTargetFrameworkAttribute>
  </PropertyGroup>

  <!-- Determine current runtime identifier -->
  <PropertyGroup>
    <CurrentRuntimeIdentifier Condition="'$(RuntimeIdentifier)' != ''">$(RuntimeIdentifier)</CurrentRuntimeIdentifier>
    <CurrentRuntimeIdentifier Condition="'$(CurrentRuntimeIdentifier)' == '' AND '$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::Windows)))' == 'true'">win-x64</CurrentRuntimeIdentifier>
    <CurrentRuntimeIdentifier Condition="'$(CurrentRuntimeIdentifier)' == '' AND '$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::OSX)))' == 'true' AND '$([System.Runtime.InteropServices.RuntimeInformation]::ProcessArchitecture)' == 'Arm64'">osx-arm64</CurrentRuntimeIdentifier>
    <CurrentRuntimeIdentifier Condition="'$(CurrentRuntimeIdentifier)' == '' AND '$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::OSX)))' == 'true'">osx-x64</CurrentRuntimeIdentifier>
    <CurrentRuntimeIdentifier Condition="'$(CurrentRuntimeIdentifier)' == ''">linux-x64</CurrentRuntimeIdentifier>
  </PropertyGroup>

  <!-- Native Build Target -->
  <Target Name="BuildNativeLibrary" BeforeTargets="Build">
    <Message Text="Building native library for $(CurrentRuntimeIdentifier)" Importance="high" />
    
    <!-- Execute native build script -->
    <Exec Command="bash build-native.sh $(CurrentRuntimeIdentifier) $(Configuration)" 
          WorkingDirectory="$(MSBuildProjectDirectory)"
          Condition="'$(OS)' != 'Windows_NT'" />
    
    <!-- Windows: Use PowerShell to call build script -->
    <Exec Command="powershell -Command &quot;&amp; { bash build-native.sh $(CurrentRuntimeIdentifier) $(Configuration) }&quot;"
          WorkingDirectory="$(MSBuildProjectDirectory)"
          Condition="'$(OS)' == 'Windows_NT'" />
  </Target>

  <!-- Include build files and native libraries in package -->
  <ItemGroup>
    <Content Include="build\**\*" PackagePath="build\" />
    <Content Include="lib\**\*" PackagePath="lib\" />
    <Content Include="bin\$(Configuration)\net8.0\runtimes\**\*" PackagePath="runtimes\" />
    <Content Include="src\*.h" PackagePath="build\native\include\" />
  </ItemGroup>

</Project>
