// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Ribosoft.Data;
using Ribosoft.Models;
using System;

namespace Ribosoft.Data.Migrations.SqlServerMigrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Ribosoft.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Ribosoft.Models.Assembly", b =>
                {
                    b.Property<int>("TaxonomyId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccessionId")
                        .IsRequired();

                    b.Property<string>("AssemblyName")
                        .IsRequired();

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool>("IsEnabled");

                    b.Property<string>("OrganismName")
                        .IsRequired();

                    b.Property<int>("SpeciesId");

                    b.Property<string>("Type")
                        .IsRequired();
                    
                    b.Property<string>("Path")
                        .IsRequired();

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("TaxonomyId");

                    b.ToTable("Assemblies");
                });

            modelBuilder.Entity("Ribosoft.Models.Design", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float?>("AccessibilityScore");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int>("CutsiteIndex");

                    b.Property<float?>("DesiredTemperatureScore");

                    b.Property<float?>("HighestTemperatureScore");

                    b.Property<int>("JobId");

                    b.Property<int>("Rank");

                    b.Property<string>("Sequence");

                    b.Property<float?>("SpecificityScore");

                    b.Property<float?>("StructureScore");

                    b.Property<int>("SubstrateSequenceLength");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("Designs");
                });

            modelBuilder.Entity("Ribosoft.Models.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AssemblyId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool>("FivePrime");

                    b.Property<string>("HangfireJobId");

                    b.Property<int>("JobState");

                    b.Property<float?>("Na");

                    b.Property<bool>("OpenReadingFrame");

                    b.Property<int>("OpenReadingFrameEnd");

                    b.Property<int>("OpenReadingFrameStart");

                    b.Property<string>("OwnerId");

                    b.Property<float?>("Probe");

                    b.Property<string>("RNAInput");

                    b.Property<int>("RibozymeId");

                    b.Property<int?>("SpecificityMethod");

                    b.Property<string>("StatusMessage");

                    b.Property<int>("TargetEnvironment");

                    b.Property<float?>("Temperature");

                    b.Property<bool>("ThreePrime");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("AssemblyId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("RibozymeId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("Ribosoft.Models.Ribozyme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Ribozymes");
                });

            modelBuilder.Entity("Ribosoft.Models.RibozymeStructure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int>("Cutsite");

                    b.Property<bool>("PostProcess");

                    b.Property<int>("RibozymeId");

                    b.Property<string>("Sequence");

                    b.Property<string>("Structure");

                    b.Property<string>("SubstrateStructure");

                    b.Property<string>("SubstrateTemplate");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("RibozymeId");

                    b.ToTable("RibozymeStructures");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Ribosoft.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Ribosoft.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Ribosoft.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Ribosoft.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Ribosoft.Models.Design", b =>
                {
                    b.HasOne("Ribosoft.Models.Job", "Job")
                        .WithMany("Designs")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Ribosoft.Models.Job", b =>
                {
                    b.HasOne("Ribosoft.Models.Assembly", "Assembly")
                        .WithMany("Jobs")
                        .HasForeignKey("AssemblyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Ribosoft.Models.ApplicationUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.HasOne("Ribosoft.Models.Ribozyme", "Ribozyme")
                        .WithMany()
                        .HasForeignKey("RibozymeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Ribosoft.Models.RibozymeStructure", b =>
                {
                    b.HasOne("Ribosoft.Models.Ribozyme", "Ribozyme")
                        .WithMany("RibozymeStructures")
                        .HasForeignKey("RibozymeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
