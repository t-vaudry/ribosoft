@model Ribosoft.Models.JobsViewModels.JobDetailsViewModel
@using System.Web

@{
    ViewData["Title"] = "Job Details";
    var shouldCancel = Model.Job.IsInProgress();
}

<h1 class="my-3">Job details</h1>

<div id="app">
    <div class="card my-3 box-shadow">
        <div class="card-body">
            <h5 class="card-title border-bottom border-gray pb-2">Request information</h5>
            <dl class="row mb-0">
                <dt class="col-md-2">
                    @Html.DisplayNameFor(model => model.Job.Id)
                </dt>
                <dd class="col-md-10">
                    @Html.DisplayFor(model => model.Job.Id)
                </dd>
                <dt class="col-md-2">
                    @Html.DisplayNameFor(model => model.Job.StatusMessage)
                </dt>
                <dd class="col-md-10">
                    @Html.DisplayFor(model => model.Job.StatusMessage)
                </dd>
                <dt class="col-md-2">
                    @Html.DisplayNameFor(model => model.Job.Ribozyme)
                </dt>
                <dd class="col-md-10">
                    @Html.DisplayFor(model => model.Job.Ribozyme.Name)
                </dd>
                <dt class="col-md-2">
                    @Html.DisplayNameFor(model => model.Job.RNAInput)
                </dt>
                <dd class="col-md-10">
                    <textarea class="form-control" rows="4" cols="80" readonly="readonly">@Model.Job.RNAInput</textarea>
                </dd>
                <dt class="col-md-4">
                    @Html.DisplayNameFor(model => model.Job.OpenReadingFrameStart)
                </dt>
                <dd class="col-md-2">
                    @Html.DisplayFor(model => model.Job.OpenReadingFrameStart)
                </dd>
                <dt class="col-md-4">
                    @Html.DisplayNameFor(model => model.Job.OpenReadingFrameEnd)
                </dt>
                <dd class="col-md-2">
                    @Html.DisplayFor(model => model.Job.OpenReadingFrameEnd)
                </dd>
                <dt class="col-md-3">
                    @Html.DisplayNameFor(model => model.Job.FivePrime)
                </dt>
                <dd class="col-md-1">
                    @Html.DisplayFor(model => model.Job.FivePrime)
                </dd>
                <dt class="col-md-3">
                    @Html.DisplayNameFor(model => model.Job.OpenReadingFrame)
                </dt>
                <dd class="col-md-1">
                    @Html.DisplayFor(model => model.Job.OpenReadingFrame)
                </dd>
                <dt class="col-md-3">
                    @Html.DisplayNameFor(model => model.Job.ThreePrime)
                </dt>
                <dd class="col-md-1">
                    @Html.DisplayFor(model => model.Job.ThreePrime)
                </dd>
                <dt class="col-md-2">
                    @Html.DisplayNameFor(model => model.Job.TargetEnvironment)
                </dt>
                <dd class="col-md-10">
                    @Html.DisplayFor(model => model.Job.TargetEnvironment)
                </dd>
                @if (Model.Job.TargetEnvironment == TargetEnvironment.InVivo && Model.Job.AssemblyId.HasValue)
                {
                    <dt class="col-md-2">
                        @Html.DisplayNameFor(model => model.Job.Assembly)
                    </dt>
                    <dd class="col-md-10">
                        @Html.DisplayFor(model => model.Job.Assembly.OrganismName)
                        (taxonomy <a href="https://www.ncbi.nlm.nih.gov/Taxonomy/Browser/wwwtax.cgi?id=@(Model.Job.Assembly.TaxonomyId)">@Html.DisplayFor(model => model.Job.Assembly.TaxonomyId)</a>,
                        species <a href="https://www.ncbi.nlm.nih.gov/Taxonomy/Browser/wwwtax.cgi?id=@(Model.Job.Assembly.SpeciesId)">@Html.DisplayFor(model => model.Job.Assembly.SpeciesId)</a>)
                        using assembly <a href="https://www.ncbi.nlm.nih.gov/assembly/@(Model.Job.Assembly.AccessionId)">@Html.DisplayFor(model => model.Job.Assembly.AssemblyName)</a>
                    </dd>
                    <dt class="col-md-2">
                        @Html.DisplayNameFor(model => model.Job.SpecificityMethod)
                    </dt>
                    <dd class="col-md-10">
                        @Html.DisplayFor(model => model.Job.SpecificityMethod)
                    </dd>
                }
                <dt class="col-md-2">
                    @Html.DisplayNameFor(model => model.Job.Temperature)
                </dt>
                <dd class="col-md-10">
                    @Html.DisplayFor(model => model.Job.Temperature)
                </dd>
                <dt class="col-md-2">
                    @Html.DisplayNameFor(model => model.Job.Na)
                </dt>
                <dd class="col-md-10">
                    @Html.DisplayFor(model => model.Job.Na)
                </dd>
                <dt class="col-md-2">
                    @Html.DisplayNameFor(model => model.Job.Probe)
                </dt>
                <dd class="col-md-10">
                    @Html.DisplayFor(model => model.Job.Probe)
                </dd>
                <dt class="col-md-2">
                    @Html.DisplayNameFor(model => model.Job.CreatedAt)
                </dt>
                <dd class="col-md-10">
                    @Html.DisplayFor(model => model.Job.CreatedAt)
                </dd>
            </dl>
        </div>
    </div>

    <div class="card my-3 box-shadow">
        <div class="card-body">
            <label class="showMore card-title border-bottom border-gray pb-2" for="advancedSettings">Advanced settings</label>
            <input id="advancedSettings" type="checkbox">
            <div>
                <dl class="row mb-0">
                    <dt class="col-md-4">
                        @Html.DisplayNameFor(model => model.Job.DesiredTempTolerance)
                    </dt>
                    <dd class="col-md-8">
                        @Html.DisplayFor(model => model.Job.DesiredTempTolerance)
                    </dd>
                    <dt class="col-md-4">
                        @Html.DisplayNameFor(model => model.Job.HighestTempTolerance)
                    </dt>
                    <dd class="col-md-8">
                        @Html.DisplayFor(model => model.Job.HighestTempTolerance)
                    </dd>
                    <dt class="col-md-4">
                        @Html.DisplayNameFor(model => model.Job.SpecificityTolerance)
                    </dt>
                    <dd class="col-md-8">
                        @Html.DisplayFor(model => model.Job.SpecificityTolerance)
                    </dd>
                    <dt class="col-md-4">
                        @Html.DisplayNameFor(model => model.Job.AccessibilityTolerance)
                    </dt>
                    <dd class="col-md-8">
                        @Html.DisplayFor(model => model.Job.AccessibilityTolerance)
                    </dd>
                    <dt class="col-md-4">
                        @Html.DisplayNameFor(model => model.Job.StructureTolerance)
                    </dt>
                    <dd class="col-md-8">
                        @Html.DisplayFor(model => model.Job.StructureTolerance)
                    </dd>
                </dl>
            </div>
        </div>
    </div>

    <div class="card my-3 box-shadow">
        <div class="card-body">
            <h5 class="card-title">Progress</h5>
            <div class="progress" style="height: 30px;">
                @if (Model.Job.JobState == JobState.New || Model.Job.JobState == JobState.Started)
                {
                    <div class="progress-bar bg-light text-dark" role="progressbar" style="width: 33%" aria-valuenow="0" aria-valuemin="0" aria-valuemax="33">Generating candidates</div>
                    <div class="progress-bar bg-light text-dark" role="progressbar" style="width: 34%" aria-valuenow="0" aria-valuemin="0" aria-valuemax="34">Evaluating specificity</div>
                    <div class="progress-bar bg-light text-dark" role="progressbar" style="width: 33%" aria-valuenow="0" aria-valuemin="0" aria-valuemax="33">Ranking</div>
                }
                else if (Model.Job.JobState == JobState.CandidateGenerator)
                {
                    <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: 33%" aria-valuenow="0" aria-valuemin="0" aria-valuemax="33">Generating candidates</div>
                    <div class="progress-bar bg-light text-dark" role="progressbar" style="width: 34%" aria-valuenow="0" aria-valuemin="0" aria-valuemax="34">Evaluating specificity</div>
                    <div class="progress-bar bg-light text-dark" role="progressbar" style="width: 33%" aria-valuenow="0" aria-valuemin="0" aria-valuemax="33">Ranking</div>
                }
                else if (Model.Job.JobState == JobState.QueuedPhase2)
                {
                    <div class="progress-bar bg-success" role="progressbar" style="width: 33%" aria-valuenow="33" aria-valuemin="0" aria-valuemax="33">Generating candidates</div>
                    <div class="progress-bar bg-light text-dark" role="progressbar" style="width: 34%" aria-valuenow="0" aria-valuemin="0" aria-valuemax="34">Evaluating specificity</div>
                    <div class="progress-bar bg-light text-dark" role="progressbar" style="width: 33%" aria-valuenow="0" aria-valuemin="0" aria-valuemax="33">Ranking</div>
                }
                else if (Model.Job.JobState == JobState.Specificity)
                {
                    <div class="progress-bar bg-success" role="progressbar" style="width: 33%" aria-valuenow="33" aria-valuemin="0" aria-valuemax="33">Generating candidates</div>
                    <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: 34%" aria-valuenow="0" aria-valuemin="0" aria-valuemax="34">Evaluating specificity</div>
                    <div class="progress-bar bg-light text-dark" role="progressbar" style="width: 33%" aria-valuenow="0" aria-valuemin="0" aria-valuemax="33">Ranking</div>
                }
                else if (Model.Job.JobState == JobState.QueuedPhase3)
                {
                    <div class="progress-bar bg-success" role="progressbar" style="width: 33%" aria-valuenow="33" aria-valuemin="0" aria-valuemax="33">Generating candidates</div>
                    <div class="progress-bar bg-success" role="progressbar" style="width: 34%" aria-valuenow="34" aria-valuemin="0" aria-valuemax="34">Evaluating specificity</div>
                    <div class="progress-bar bg-light text-dark" role="progressbar" style="width: 33%" aria-valuenow="0" aria-valuemin="0" aria-valuemax="33">Ranking</div>
                }
                else if (Model.Job.JobState == JobState.MultiObjectiveOptimization)
                {
                    <div class="progress-bar bg-success" role="progressbar" style="width: 33%" aria-valuenow="33" aria-valuemin="0" aria-valuemax="33">Generating candidates</div>
                    <div class="progress-bar bg-success" role="progressbar" style="width: 34%" aria-valuenow="34" aria-valuemin="0" aria-valuemax="34">Evaluating specificity</div>
                    <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: 33%" aria-valuenow="0" aria-valuemin="0" aria-valuemax="33">Ranking</div>
                }
                else if (Model.Job.JobState == JobState.Errored)
                {
                    <div class="progress-bar bg-danger" role="progressbar" style="width: 100%" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100">Errored</div>
                }
                else if (Model.Job.JobState == JobState.Completed)
                {
                    <div class="progress-bar bg-success" role="progressbar" style="width: 100%" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100">Completed</div>
                }
            </div>
        </div>
    </div>

    <div class="card my-3 box-shadow">
        <div class="card-body">
            <div class="clearfix">
                <h5 class="card-title float-md-left">Designs</h5>
                <div class="float-md-right mb-2" id="showFilterOptions">
                    <button class="btn btn-sm btn-primary" v-on:click="refineResults" id="refineResults"><i class="fas fa-filter"></i> Refine Results</button>
                </div>
                <div class="float-md-right mb-2">
                    <b-dropdown id="ddown-right" size="sm" right variant="primary">
                        <template slot="button-content">
                            <i class="fas fa-download"></i> Download
                        </template>
                        <input type="button" id="zipAll" class="dropdown-item" role="menuitem" value="Download all to .zip" />
                        <input type="button" id="fastaAll" class="dropdown-item" role="menuitem" value="Download all to .fasta" />
                        <input type="button" id="csvAll" class="dropdown-item" role="menuitem" value="Download all to .csv" />
                        <b-dropdown-divider></b-dropdown-divider>
                        <input type="button" id="zip" class="dropdown-item disabled" role="menuitem" value="Download selected to .zip" />
                        <input type="button" id="fasta" class="dropdown-item disabled" role="menuitem" value="Download selected to .fasta" />
                        <input type="button" id="csv" class="dropdown-item disabled" role="menuitem" value="Download selected to .csv" />
                    </b-dropdown>
                </div>

                <div class="table-responsive mb-2">
                    <div id="filterOptions" class="mb-2"></div>
                    <table class="table table-hover mb-0">
                        <thead>
                            <tr>
                                <th>
                                    <div class="d-flex align-items-center sortable">
                                        @Html.Raw((string)ViewBag.RankColumnTitle)
                                        <i id="ranksort" class="fas fa-sort"></i>
                                    </div>
                                </th>
                                <th>
                                    <div class="d-flex align-items-center">
                                        @Html.DisplayNameFor(model => model.Designs.Data.First().Sequence)
                                    </div>
                                </th>
                                <th>
                                    <div class="d-flex align-items-center sortable">
                                        @Html.Raw((string)ViewBag.DesTempColumnTitle)
                                        <i id="destempsort" class="fas fa-sort"></i>
                                    </div>
                                </th>
                                <th>
                                    <div class="d-flex align-items-center sortable">
                                        @Html.Raw((string)ViewBag.HiTempColumnTitle)
                                        <i id="hitempsort" class="fas fa-sort"></i>
                                    </div>
                                </th>
                                <th>
                                    <div class="d-flex align-items-center sortable">
                                        @Html.Raw((string)ViewBag.SpecColumnTitle)
                                        <i id="specsort" class="fas fa-sort"></i>
                                    </div>
                                </th>
                                <th>
                                    <div class="d-flex align-items-center sortable">
                                        @Html.Raw((string)ViewBag.AccessColumnTitle)
                                        <i id="accesssort" class="fas fa-sort"></i>
                                    </div>
                                </th>
                                <th>
                                    <div class="d-flex align-items-center sortable">
                                        @Html.Raw((string)ViewBag.StructColumnTitle)
                                        <i id="structsort" class="fas fa-sort"></i>
                                    </div>
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model.Designs.Data)
                            {
                                <tr id="@item.JobId-@item.Id" class="clickable-row">
                                    <td>
                                        @Html.DisplayFor(modelItem => item.Rank)
                                    </td>
                                    <td>
                                        <code style="word-break: break-all;">@Html.DisplayFor(modelItem => item.Sequence)</code>
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.DesiredTemperatureScore)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.HighestTemperatureScore)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.SpecificityScore)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.AccessibilityScore)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.StructureScore)
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <cs-pager cs-paging-pagesize="@Model.Designs.PageSize"
                          cs-paging-pagenumber="@Model.Designs.PageNumber"
                          cs-paging-totalitems="@Model.Designs.TotalItems"
                          asp-action="Details"
                          asp-controller="Jobs"
                          asp-route-id="@Model.Job.Id"
                          asp-route-sortOrder="@Model.SortOrder"
                          cs-pagenumber-param="pageNumber"
                          cs-pager-ul-class="pagination mb-0"
                          cs-pager-li-current-class="page-item active"
                          cs-pager-li-other-class="page-item"
                          cs-pager-li-non-active-class="page-item disabled"
                          cs-pager-link-current-class="page-link"
                          cs-pager-link-other-class="page-link"></cs-pager>
            </div>
        </div>
    </div>

    <div class="clearfix">
        <a asp-action="Index" class="btn btn-primary float-sm-left"><i class="fas fa-arrow-left ml-1"></i> Back to jobs</a>

        @if (Model.Job.JobState == JobState.New || Model.Job.JobState == JobState.Started)
        {
            <a asp-action="Delete" asp-route-id="@Model.Job.Id" class="btn btn-danger float-sm-right">Cancel <i class="fas fa-trash ml-1"></i></a>
        }
        else
        {
            <a asp-action="Delete" asp-route-id="@Model.Job.Id" class="btn btn-danger float-sm-right">@(shouldCancel ? "Cancel" : "Delete") <i class="fas fa-trash ml-1"></i></a>
        }
    </div>
</div>

@section scripts
{
    <script type="text/javascript">
        jQuery(document).ready(function ($) {
            var selectedDesigns = JSON.parse(localStorage.getItem("selectedDesigns")) || {};
            $.each(selectedDesigns, function (key, value) {
                $('#' + key).addClass("selected");
            });
            if (!jQuery.isEmptyObject(selectedDesigns)) {
                $('#zip').removeClass("disabled");
                $('#fasta').removeClass("disabled");
                $('#csv').removeClass("disabled");
            }

            $(".clickable-row").click(function () {
                if ($(this).hasClass("selected")) {
                    $(this).removeClass("selected");
                    delete selectedDesigns[this.id];
                    if (jQuery.isEmptyObject(selectedDesigns)) {
                        $('#zip').addClass("disabled");
                        $('#fasta').addClass("disabled");
                        $('#csv').addClass("disabled");
                    }
                } else {
                    $(this).addClass("selected");
                    selectedDesigns[this.id] = true;
                    $('#zip').removeClass("disabled");
                    $('#fasta').removeClass("disabled");
                    $('#csv').removeClass("disabled");
                }
                localStorage.setItem("selectedDesigns", JSON.stringify(selectedDesigns));
            });

            $("#filterOptions").structFilter({
                fields: [
                    { id: "Rank", type: "number", label: "Rank" },
                    { id: "HighestTemperatureScore", type: "number", label: "Highest Temperature Score" },
                    { id: "DesiredTemperatureScore", type: "number", label: "Desired Temperature Score" },
                    { id: "SpecificityScore", type: "number", label: "Specificity Score" },
                    { id: "AccessibilityScore", type: "number", label: "Accessibility Score" },
                    { id: "StructureScore", type: "number", label: "Structure Score" }
                ]
            });

            @foreach( var filter in Model.FilterList )
            {
                @Html.Raw("$('#filterOptions').structFilter('addCondition', " + filter.GetJson() + ");");
            }

            var newFilter = document.getElementsByClassName('evo-bNew')[0];
            newFilter.classList.toggle('d-none');

            var filterOptions = document.getElementById('filterOptions');
            filterOptions.classList.toggle('border-0');
            filterOptions.classList.toggle('no-height');

            var editFilter = document.getElementsByClassName('evo-editFilter')[0];
            editFilter.classList.toggle('d-none');

            var addFilter = document.getElementsByClassName('evo-bAdd')[0];
            addFilter.classList.toggle('d-none');

            var delFilter = document.getElementsByClassName('evo-bDel')[0];
            delFilter.classList.toggle('d-none');

            var searchFilters = document.getElementsByClassName('evo-searchFilters')[0];
            Array.from(searchFilters.children).forEach(function (el) {
                el.lastChild.classList.toggle('d-none');
                el.classList.toggle('disabled-link');
            });

            $("#filterOptions").on("change.search", function (event) {
                var filters = $("#filterOptions").structFilter("val");
                $.each(filters,
                    function (index, obj) {
                        obj['param'] = obj['field']['value'];
                        obj['condition'] = obj['operator']['value'];
                        obj['value'] = obj['value']['value'];
                        delete obj['operator'];
                        delete obj['field'];
                    }
                );

                var data = {
                    sortOrder: '@Model.SortOrder',
                    pageNumber: @Model.Designs.PageNumber,
                    filterData: btoa(JSON.stringify(filters))
                };

                var encoded = $.param(data);
                window.location.href = "/Jobs/Details/@Model.Job.Id?" + encoded;
            });

            function sortFunc(el) {
                if (el[0].id.slice(0, -4) == '@Model.SortOrder'.split('_')[0]) {
                    el[0].classList.remove(['fa-sort', 'fa-sort-up', 'fa-sort-down']);
                    el[0].classList.add('@Model.SortOrder'.split('_')[1] == 'asc' ? 'fa-sort-up' : 'fa-sort-down');
                } else {
                    el[0].classList.remove(['fa-sort', 'fa-sort-up', 'fa-sort-down']);
                    el[0].classList.add('fa-sort');
                }
            }

            function sortClick(el) {
                var type = el[0].id.slice(0, -4);
                var sortOrder = '';
                switch (type) {
                    case 'rank':
                        sortOrder = '@ViewBag.RankSortParm';
                        break;
                    case 'hitemp':
                        sortOrder = '@ViewBag.HiTempSortParm';
                        break;
                    case 'destemp':
                        sortOrder = '@ViewBag.DesTempSortParm';
                        break;
                    case 'access':
                        sortOrder = '@ViewBag.AccessSortParm';
                        break;
                    case 'spec':
                        sortOrder = '@ViewBag.SpecSortParm';
                        break;
                    case 'struct':
                        sortOrder = '@ViewBag.StructSortParm';
                        break;
                    default:
                        break;
                }

                var filters = $("#filterOptions").structFilter("val");
                $.each(filters,
                    function (index, obj) {
                        obj['param'] = obj['field']['value'];
                        obj['condition'] = obj['operator']['value'];
                        obj['value'] = obj['value']['value'];
                        delete obj['operator'];
                        delete obj['field'];
                    }
                );

                var data = {
                    sortOrder: sortOrder,
                    pageNumber: @Model.Designs.PageNumber,
                    filterData: btoa(JSON.stringify(filters))
                };

                var encoded = $.param(data);
                window.location.href = "/Jobs/Details/@Model.Job.Id?" + encoded;
            }

            function clickFunc(format) {
                $.ajax({
                    type: "POST",
                    url: "/Jobs/DownloadSelectedDesigns",
                    data: {
                        jobID: @Model.Job.Id,
                        selectedDesigns: JSON.stringify(selectedDesigns),
                        format: format
                    },
                    success: function (data) {
                        window.location = '/Jobs/Download?fileGuid=' + data.fileGuid + '&fileName=' + data.fileName + '&fileType=' + data.fileType;
                        $(".clickable-row.selected").each(function(i, obj) {
                            $(this).removeClass("selected");
                            delete selectedDesigns;
                            localStorage.setItem("selectedDesigns", JSON.stringify({}));
                            $('#zip').addClass("disabled");
                            $('#fasta').addClass("disabled");
                            $('#csv').addClass("disabled");
                        })
                    }
                });
            }

            function clickFuncAll(format) {
                var filters = $("#filterOptions").structFilter("val");
                $.each(filters,
                    function (index, obj) {
                        obj['param'] = obj['field']['value'];
                        obj['condition'] = obj['operator']['value'];
                        obj['value'] = obj['value']['value'];
                        delete obj['operator'];
                        delete obj['field'];
                    }
                );

                $.ajax({
                    type: "POST",
                    url: "/Jobs/DownloadDesigns",
                    data: {
                        jobID: @Model.Job.Id,
                        filterData: btoa(JSON.stringify(filters)),
                        format: format
                    },
                    success: function (data) {
                        window.location = '/Jobs/Download?fileGuid=' + data.fileGuid + '&fileName=' + data.fileName + '&fileType=' + data.fileType;
                    }
                });
            }

            $('#zip').click(function () { return clickFunc("zip"); });
            $('#fasta').click(function () { return clickFunc("fasta"); });
            $('#csv').click(function () { return clickFunc("csv"); });
            $('#zipAll').click(function () { return clickFuncAll("zip"); });
            $('#fastaAll').click(function () { return clickFuncAll("fasta"); });
            $('#csvAll').click(function () { return clickFuncAll("csv"); });

            $('#ranksort').ready(function () { return sortFunc($('#ranksort')); })
            $('#destempsort').ready(function () { return sortFunc($('#destempsort')); })
            $('#hitempsort').ready(function () { return sortFunc($('#hitempsort')); })
            $('#accesssort').ready(function () { return sortFunc($('#accesssort')); })
            $('#specsort').ready(function () { return sortFunc($('#specsort')); })
            $('#structsort').ready(function () { return sortFunc($('#structsort')); })

            $('#ranksort').parent().click(function () { return sortClick($('#ranksort')); })
            $('#destempsort').parent().click(function () { return sortClick($('#destempsort')); })
            $('#hitempsort').parent().click(function () { return sortClick($('#hitempsort')); })
            $('#accesssort').parent().click(function () { return sortClick($('#accesssort')); })
            $('#specsort').parent().click(function () { return sortClick($('#specsort')); })
            $('#structsort').parent().click(function () { return sortClick($('#structsort')); })
        });
    </script>
    <script src="~/dist/details.js"></script>
}
