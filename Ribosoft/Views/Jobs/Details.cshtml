@model Ribosoft.Models.JobsViewModels.JobDetailsViewModel

@{
    ViewData["Title"] = "Job Details";
}

<h2>Job Details</h2>

<div>
    <h4>Job</h4>
    <hr />
    <dl class="dl-horizontal">
        <dt>
            @Html.DisplayNameFor(model => model.Job.JobState)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.Job.JobState)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.Job.StatusMessage)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.Job.StatusMessage)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.Job.RNAInput)
        </dt>
        <dd>
            <textarea rows="4" cols="80" readonly="readonly">@Model.Job.RNAInput</textarea>
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.Job.Ribozyme)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.Job.Ribozyme.Name)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.Job.CreatedAt)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.Job.CreatedAt)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.Job.UpdatedAt)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.Job.UpdatedAt)
        </dd>
    </dl>
</div>

<h4>Designs</h4>
<hr />
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.ActionLink("Rank", "Details", new { sortOrder = "rank_asc", pageNumber = @Model.Designs.PageNumber })
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Designs.Data.First().Sequence)
            </th>
            <th>
                @Html.ActionLink("Desired Temperature Score", "Details", new { sortOrder = "desired_temp_desc", pageNumber = @Model.Designs.PageNumber })
            </th>
            <th>
                @Html.ActionLink("Highest Temperature Score", "Details", new { sortOrder = "high_temp_desc", pageNumber = @Model.Designs.PageNumber })
            </th>
            <th>
                @Html.ActionLink("Specificity Score", "Details", new { sortOrder = "spec_desc", pageNumber = @Model.Designs.PageNumber })
            </th>
            <th>
                @Html.ActionLink("Accessibility Score", "Details", new { sortOrder = "access_desc", pageNumber = @Model.Designs.PageNumber })
            </th>
            <th>
                @Html.ActionLink("Structure Score", "Details", new { sortOrder = "struct_desc", pageNumber = @Model.Designs.PageNumber })
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.Designs.Data)
        {
        float? HighestTemperatureScore = -1.0f * item.HighestTemperatureScore;
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Rank)
            </td>
            <td>
                <code>@Html.DisplayFor(modelItem => item.Sequence)</code>
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.DesiredTemperatureScore)
            </td>
            <td>
                @Html.DisplayFor(modelItem => HighestTemperatureScore)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.SpecificityScore)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.AccessibilityScore)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.StructureScore)
            </td>
            <td>
                <a asp-controller="Designs" asp-action="Details" asp-route-id="@item.Id">Details</a>
            </td>
        </tr>
        }
    </tbody>
</table>

<cs-pager cs-paging-pagesize="@Model.Designs.PageSize"
    cs-paging-pagenumber="@Model.Designs.PageNumber"
    cs-paging-totalitems="@Model.Designs.TotalItems"
    asp-action="Details"
    asp-controller="Jobs"
    asp-route-id="@Model.Job.Id"
    asp-route-sortOrder="@Model.SortOrder"
    cs-pagenumber-param="pageNumber"
    cs-pager-li-current-class="page-item active"
    cs-pager-li-other-class="page-item"
    cs-pager-li-non-active-class="page-item disabled"
    cs-pager-link-current-class="page-link"
    cs-pager-link-other-class="page-link"></cs-pager>

<div>
    @if (Model.Job.JobState == JobState.New || Model.Job.JobState == JobState.Started)
    {
        <a asp-action="Delete" asp-route-id="@Model.Job.Id">Cancel</a> @:|
    }
    <a asp-action="Index">Back to List</a>
</div>
